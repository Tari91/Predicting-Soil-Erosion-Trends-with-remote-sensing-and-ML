import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# 1. Generate Synthetic Dataset
np.random.seed(42)
n_samples = 200

data = pd.DataFrame({
    'NDVI': np.random.rand(n_samples),
    'slope': np.random.rand(n_samples) * 40,  # degrees
    'rainfall': np.random.rand(n_samples) * 300,  # mm
    'land_cover': np.random.randint(1, 6, n_samples),  # categories encoded as integers
    'elevation': np.random.rand(n_samples) * 1500,  # meters
})

# 2. Create Synthetic Soil Loss (Target Variable)
data['soil_loss'] = (
    50 - data['NDVI'] * 20
    + data['slope'] * 0.8
    + data['rainfall'] * 0.1
    + data['land_cover'] * 2
    + data['elevation'] * 0.02
    + np.random.normal(0, 5, n_samples)  # noise
)

# 3. Prepare Features and Target
features = ['NDVI', 'slope', 'rainfall', 'land_cover', 'elevation']
target = 'soil_loss'
X = data[features]
y = data[target]

# 4. Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5. Train Model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# 6. Make Predictions
y_pred = model.predict(X_test)

# 7. Evaluate Model
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"Model Performance:\nRMSE: {rmse:.2f}\nRÂ²: {r2:.2f}")

# 8. Export Results to Excel
results_df = pd.DataFrame({
    'Actual Soil Loss': y_test.values,
    'Predicted Soil Loss': y_pred
})
results_df.to_excel("synthetic_soil_erosion_predictions.xlsx", index=False)

# 9. Plot Results
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, c='blue', alpha=0.6, edgecolors='k')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel("Actual Soil Loss")
plt.ylabel("Predicted Soil Loss")
plt.title("Actual vs Predicted Soil Erosion")
plt.grid(True)
plt.tight_layout()
plt.show()

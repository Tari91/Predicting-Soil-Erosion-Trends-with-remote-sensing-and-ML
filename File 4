import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# 1. Load Data
data = pd.read_csv("soil_erosion_dataset.csv")  # Replace with your path
print("Data Loaded Successfully.")
print(data.head())

# 2. Define Features and Target
features = ['NDVI', 'slope', 'rainfall', 'land_cover', 'elevation']  # Customize if needed
target = 'soil_loss'

X = data[features]
y = data[target]

# 3. Split Data
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# 4. Train Model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
print("Model training completed.")

# 5. Predict and Evaluate
y_pred = model.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"\nModel Performance:")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# 6. Plot Actual vs Predicted
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.6, c='green', edgecolors='k')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=2)
plt.xlabel("Actual Soil Loss")
plt.ylabel("Predicted Soil Loss")
plt.title("Actual vs Predicted Soil Erosion")
plt.grid(True)
plt.tight_layout()
plt.show()
